{"version":3,"sources":["сomponents/Counter/Counter.module.css","сomponents/FullName/FullName.module.css","сomponents/Qualities/Qualities.module.css","сomponents/Qualities/Quality/Quality.module.css","сomponents/Counter/CounterButton/CounterButton.module.css","сomponents/Counter/CounterInput/CounterInput.module.css","сomponents/Counter/InputName/InputName.module.css","сomponents/DialogItem/Message/Time/Time.jsx","сomponents/DialogItem/Message/Message.jsx","сomponents/DialogItem/Name/Name.jsx","сomponents/DialogItem/Avatar/Avatar.jsx","сomponents/DialogItem/DialogItem.jsx","сomponents/FullName/FullName.jsx","сomponents/Counter/CounterButton/CounterButton.jsx","сomponents/Counter/CounterInput/CounterInput.jsx","сomponents/Counter/InputName/InputName.jsx","сomponents/Counter/Counter.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["module","exports","dateWithouthSecond","Date","Time","render","toLocaleTimeString","hour","minute","React","Component","Message","Name","Avatar","src","alt","CounterButton","onClick","this","props","logic","className","style","counterButton","CounterInput","ref","referral","counterInput","type","placeholder","InputName","nameItem","list","map","n","name","listNames","Counter","mainCounter","mainCounterNumber","date","counter","mainCounterInput","inputListName","App","inputValueText","createRef","state","incrementCounter","setState","prevState","alertInputValue","mainText","current","value","listName","length","alert","handleClick","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.904f96c8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainCounter\":\"Counter_mainCounter__1SmqU\",\"mainCounterInput\":\"Counter_mainCounterInput__1r1uz\",\"mainCounterNumber\":\"Counter_mainCounterNumber__2LRz5\",\"inputListName\":\"Counter_inputListName__1UtUv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"qualities\":\"FullName_qualities__18Ha2\",\"wrapper\":\"FullName_wrapper__3OvyG\",\"title\":\"FullName_title__2zNB4\",\"printed-text\":\"FullName_printed-text__1Zn-0\",\"flashin-border\":\"FullName_flashin-border__3HpQQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"qualities\":\"Qualities_qualities__-w1WE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"beautiful\":\"Quality_beautiful__-_qDF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counterButton\":\"CounterButton_counterButton__1Nefu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counterInput\":\"CounterInput_counterInput__1tXbg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listNames\":\"InputName_listNames__30Cxp\"};","import React from \"react\";\r\n\r\nlet dateWithouthSecond = new Date();\r\n\r\nclass Time extends React.Component {\r\n\r\n    render = () => {\r\n        return (\r\n            dateWithouthSecond.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})\r\n        );\r\n    }\r\n}\r\n\r\nexport default Time;","import React from \"react\";\r\nimport Time from \"./Time/Time\";\r\n\r\n\r\nconst Message = () => {\r\n    return (\r\n        <p>\r\n            Lorem ipsum dolor sit amet, consectetur adipisicing elit. Animi commodi dolore, dolores eos expedita hic\r\n            inventore labore molestias odio porro quis quisquam quod, reprehenderit ut voluptatem.\r\n            Amet eum velit voluptatem.\r\n            <span>\r\n                <Time />\r\n            </span>\r\n        </p>\r\n    );\r\n}\r\n\r\nexport default Message;","import React from \"react\";\r\n\r\nconst Name = () => {\r\n    return (\r\n        <p>Sergey Neplashov</p>\r\n    );\r\n}\r\n\r\nexport default Name;","import React from \"react\";\r\n\r\nconst Avatar = () => {\r\n    return (\r\n        <img src=\"https://cdn.dribbble.com/users/924650/screenshots/6606195/robohobo_detailed.png\" alt=\"\"/>\r\n    );\r\n}\r\nexport default Avatar;","import React from \"react\";\r\nimport './DialogItem.css';\r\nimport Message from \"./Message/Message\";\r\nimport Name from \"./Name/Name\";\r\nimport Avatar from \"./Avatar/Avatar\";\r\n\r\nclass DialogItem extends React.Component {\r\n\r\n    render = () => {\r\n        return (\r\n            <div className=\"telegram_message\">\r\n                <div className=\"avatar\">\r\n                    <Avatar/>\r\n                </div>\r\n                <div className=\"cloud\">\r\n                    <div className=\"cloud_name\">\r\n                        <Name/>\r\n                    </div>\r\n                    <div className=\"cloud_text\">\r\n                        <Message/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport style from './FullName.module.css'\r\n\r\n\r\nclass FullName extends React.Component {\r\n    render = () => {\r\n\r\n        return (\r\n            <div className={style.wrapper}>\r\n                <h1 className={style.title}>Неплашов Сергей Иванович</h1>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FullName;","import React from \"react\";\r\nimport style from './CounterButton.module.css'\r\n\r\n\r\n\r\nclass CounterButton extends React.Component{\r\n    render() {\r\n        return (\r\n            <button onClick={this.props.logic} className={style.counterButton} >\r\n                Кнопка\r\n            </button>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default CounterButton;","import React from \"react\";\r\nimport style from './CounterInput.module.css'\r\n\r\n\r\nclass CounterInput extends React.Component{\r\n    render() {\r\n        return (\r\n            <input ref={this.props.referral} className={style.counterInput} type=\"text\" placeholder=\"Введите Ваше имя\"/>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default CounterInput;","import React from \"react\";\r\nimport style from './InputName.module.css'\r\n\r\n\r\nclass InputName extends React.Component {\r\n    render() {\r\n        let nameItem = this.props.list.map(n =><li>{n.name}</li>);\r\n        return (\r\n            <div className={style.listNames}>\r\n                <h1>Введенные имена:</h1>\r\n                <ul>\r\n                    {nameItem}\r\n                </ul>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default InputName;","import React from \"react\";\r\nimport style from './Counter.module.css'\r\nimport CounterButton from \"./CounterButton/CounterButton\";\r\nimport CounterInput from \"./CounterInput/CounterInput\";\r\nimport InputName from \"./InputName/InputName\";\r\n\r\n\r\nclass Counter extends React.Component {\r\n    // inputValueText = React.createRef();\r\n    //\r\n    // state = {\r\n    //     listNames: [\r\n    //         {name: null}\r\n    //     ],\r\n    //     counter: 0\r\n    // };\r\n    //\r\n    // incrementCounter = () => this.setState((prevState) => ({counter: prevState.counter + 1}));\r\n    //\r\n    // alertInputValue = () => {\r\n    //     let mainText = this.inputValueText.current.value;\r\n    //     this.inputValueText.current.value = \"\";\r\n    //     let listName = [...this.state.listNames, {name: mainText}];\r\n    //     if (mainText.length === 0) {\r\n    //         alert(\"Введите ваше имя\");\r\n    //     } else {\r\n    //         this.setState({listNames: listName});\r\n    //         alert(\"Привет \" + mainText);\r\n    //     }\r\n    // };\r\n    //\r\n    // handleClick = () => {\r\n    //     this.incrementCounter();\r\n    //     this.alertInputValue();\r\n    // };\r\n\r\n    render() {\r\n        return (\r\n            <div className={style.mainCounter}>\r\n                <div className={style.mainCounterNumber}>\r\n                    <span>\r\n                        Вы нажали на кнопку: {this.props.date.counter} раз.\r\n                    </span>\r\n                </div>\r\n                <div className={style.mainCounterInput}>\r\n                    <CounterInput referral={this.props.referral}/>\r\n                    <CounterButton logic={this.props.logic}/>\r\n                </div>\r\n                <div className={style.inputListName}>\r\n                    <InputName list={this.props.list}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Counter;","import React from 'react';\r\nimport './App.css';\r\nimport DialogItem from \"./сomponents/DialogItem/DialogItem\";\r\nimport FullName from \"./сomponents/FullName/FullName\";\r\nimport Qualities from \"./сomponents/Qualities/Qualities\";\r\nimport Counter from \"./сomponents/Counter/Counter\";\r\n\r\nclass App extends React.Component {\r\n\r\n    inputValueText = React.createRef();\r\n\r\n    state = {\r\n        listNames: [\r\n            {name: null}\r\n        ],\r\n        counter: 0\r\n    };\r\n\r\n    incrementCounter = () => this.setState((prevState) => ({counter: prevState.counter + 1}));\r\n\r\n    alertInputValue = () => {\r\n        let mainText = this.inputValueText.current.value;\r\n        this.inputValueText.current.value = \"\";\r\n        let listName = [...this.state.listNames, {name: mainText}];\r\n        if (mainText.length === 0) {\r\n            alert(\"Введите ваше имя\");\r\n        } else {\r\n            this.setState({listNames: listName});\r\n            alert(\"Привет \" + mainText);\r\n        }\r\n    };\r\n\r\n    handleClick = () => {\r\n        this.incrementCounter();\r\n        this.alertInputValue();\r\n    };\r\n\r\n    render() {\r\n\r\n        // let qualities = [\r\n        //     {quality: 'рационалист', id: 1, className: ''},\r\n        //     {quality: 'комуннист', id: 2,  className: 'beautiful'},\r\n        //     {quality: 'анимешник', id: 3,  className: ''},\r\n        // ];\r\n\r\n        return(\r\n            <div className=\"App\">\r\n                {/*<FullName />*/}\r\n                {/*<Qualities qualities = {qualities} />*/}\r\n                {/*<DialogItem />*/}\r\n                <Counter\r\n                date={this.state}\r\n                referral={this.inputValueText}\r\n                logic={this.handleClick}\r\n                list={this.state.listNames}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}